diff --git a/usr.sbin/bsdinstall/bsdinstall b/usr.sbin/bsdinstall/bsdinstall
index 1ca03f5c9593..6c9eab541405 100755
--- a/usr.sbin/bsdinstall/bsdinstall
+++ b/usr.sbin/bsdinstall/bsdinstall
@@ -77,7 +77,7 @@ if [ "$debug" ]; then
 	"") exec "/usr/libexec/bsdinstall/$VERB" "$@" 2> /dev/null ;;
 	# If begins with `+', send errors to both terminal and file (no `+')
 	+*) exec "/usr/libexec/bsdinstall/$VERB" "$@" \
-		2>&1 >&$TERMINAL_STDOUT_PASSTHRU | tee "${debugFile#+}" ;;
+		2>&1 >&$TERMINAL_STDOUT_PASSTHRU | tee -a "${debugFile#+}" ;;
 	# Otherwise, just send errors to the file specified
 	*) exec "/usr/libexec/bsdinstall/$VERB" "$@" 2>> "$debugFile"
 	esac
diff --git a/usr.sbin/bsdinstall/scripts/script b/usr.sbin/bsdinstall/scripts/script
index 24469589d1a5..f5104e94e5ff 100755
--- a/usr.sbin/bsdinstall/scripts/script
+++ b/usr.sbin/bsdinstall/scripts/script
@@ -143,7 +143,7 @@ else
 		# case of EFI system partitions only. This *ONLY WORKS* if
 		# /boot/efi is empty and does not handle analagous problems on
 		# other systems (ARM, PPC64).
-		tar -xf "$BSDINSTALL_DISTDIR/$set" -C $BSDINSTALL_CHROOT --exclude boot/efi
+		tar -xPf "$BSDINSTALL_DISTDIR/$set" -C $BSDINSTALL_CHROOT --exclude boot/efi
 		mkdir -p $BSDINSTALL_CHROOT/boot/efi
 	done
 fi
diff --git a/usr.sbin/bsdinstall/scripts/zfsboot b/usr.sbin/bsdinstall/scripts/zfsboot
index 1e771710cb7c..05b4def69bc4 100755
--- a/usr.sbin/bsdinstall/scripts/zfsboot
+++ b/usr.sbin/bsdinstall/scripts/zfsboot
@@ -1464,6 +1464,9 @@ zfs_create_boot()
 	             "$zroot_name" || return $FAILURE
 
 	if [ "$ZFSBOOT_BOOT_POOL" ]; then
+		f_eval_catch $funcname zpool "$ZPOOL_SET" \
+			"cachefile=\"$BSDINSTALL_CHROOT/boot/zfs/zpool.cache\"" \
+			"$bootpool_name" || return $FAILURE
 		f_eval_catch $funcname printf "$PRINTF_CONF" \
 			vfs.root.mountfrom \
 			"\"zfs:$zroot_name/$zroot_bootfs\"" \
@@ -1512,6 +1515,26 @@ zfs_create_boot()
 		             return $FAILURE
 	fi
 
+	if [ "$ZFSBOOT_BOOT_POOL" ]; then
+		local cachepath="$bootpool/boot/zfs/zpool.cache"
+		local cachedir="$BSDINSTALL_CHROOT/var/cache"
+		local cachefile="$cachedir/zpool.cache"
+
+		f_eval_catch $funcname mkdir "$MKDIR_P" $cachedir ||
+			     return $FAILURE
+		f_eval_catch $funcname cp "$COPY" $cachepath $cachedir ||
+			     return $FAILURE
+		f_eval_catch $funcname zpool "$ZPOOL_EXPORT" $bootpool_name ||
+			     return $FAILURE
+		f_eval_catch $funcname mkdir "$MKDIR_P" $bootpool/boot/zfs ||
+			     return $FAILURE
+		f_eval_catch $funcname cp "$COPY" $cachefile $cachepath ||
+			     return $FAILURE
+		f_eval_catch $funcname zpool "$ZPOOL_IMPORT_WITH_OPTIONS" \
+			     "-o altroot=\"$BSDINSTALL_CHROOT\"" \
+			     $bootpool_name || return $FAILURE
+	fi
+
 	# We're all done unless we should go on to do encryption
 	[ "$ZFSBOOT_GELI_ENCRYPTION" ] || return $SUCCESS
 
